from flask import Flask, render_template, redirect, url_for, flash, request, gfrom flask_bootstrap import Bootstrapfrom flask_ckeditor import CKEditorfrom datetime import datefrom werkzeug.exceptions import abortfrom werkzeug.security import generate_password_hash, check_password_hashfrom flask_sqlalchemy import SQLAlchemyfrom sqlalchemy.orm import relationshipfrom flask_login import UserMixin, login_user, LoginManager, login_required, current_user, logout_userfrom forms import CreatePostForm, RegisterForm, LoginForm, CommentFormfrom flask_gravatar import Gravatarfrom sqlalchemy import exc,ForeignKeyfrom functools import wrapsapp = Flask(__name__)app.config['SECRET_KEY'] = '8BYkEfBA6O6donzWlSihBXox7C0sKR6b'ckeditor = CKEditor(app)Bootstrap(app)Gravatar(app)##CONNECT TO DBapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = Falsedb = SQLAlchemy(app)login_manager = LoginManager(app)##CONFIGURE TABLESclass User(UserMixin, db.Model):    __tablename__ = 'users'    id = db.Column(db.Integer, primary_key=True)    username = db.Column(db.String(250), nullable=False)    email = db.Column(db.String(250), unique=True, nullable=False)    password = db.Column(db.String(24), nullable=False)    posts = relationship('BlogPost')    comments = relationship('Comment')class BlogPost(db.Model):    __tablename__ = "blog_posts"    id = db.Column(db.Integer, primary_key=True)    author_id = db.Column(db.Integer,ForeignKey('users.id'))    author = db.Column(db.String(250),nullable=False)    title = db.Column(db.String(250), unique=True, nullable=False)    subtitle = db.Column(db.String(250), nullable=False)    date = db.Column(db.String(250), nullable=False)    body = db.Column(db.Text, nullable=False)    img_url = db.Column(db.String(250), nullable=False)    comments = relationship('Comment')class Comment(db.Model):    __tablename__ = 'comments'    id = db.Column(db.Integer, primary_key = True)    text = db.Column(db.Text, nullable=False)    author_id = db.Column(db.Integer, ForeignKey('users.id'))    author = db.Column(db.String(250), nullable=False)    post_id = db.Column(db.Integer, ForeignKey('blog_posts.id'))    parent_post =db.Column(db.String(250), nullable=False)db.create_all()def admin_only(f):    @wraps(f)    def decorated_function(*args, **kwargs):        if current_user != User.query.get(1):            return abort(403)        return f(*args, **kwargs)    return decorated_function@app.route('/')def get_all_posts():    posts = BlogPost.query.all()    return render_template("index.html", all_posts=posts)@app.route("/post/<int:post_id>",methods=['GET','POST'])def show_post(post_id):    form = CommentForm()    comments = Comment.query.all()    requested_post = BlogPost.query.get(post_id)    if request.method == 'POST':        if current_user.is_authenticated:            new_comment = Comment(text=form.text.data,                                  author_id=current_user.id,                                  author=current_user.username,                                  post_id=requested_post.id,                                  parent_post=requested_post.title)            db.session.add(new_comment)            db.session.commit()        else:            return redirect(url_for('login',err='Login required'))    return render_template("post.html", post=requested_post, form=form,comments = comments)@app.route('/register', methods=['POST', 'GET'])def register():    form = RegisterForm()    error = None    if request.method == 'POST':        pswd = generate_password_hash(form.password.data, method='pbkdf2:sha256', salt_length=8)        new_user = User(username=form.username.data, email=form.email.data, password=pswd)        try:            db.session.add(new_user)            db.session.commit()        except exc.IntegrityError:            error = 'Already Registered'            return redirect(url_for(endpoint='login'))        load_user(str(new_user.id))        login_user(new_user)        return redirect(url_for(endpoint='get_all_posts'))    return render_template("register.html", form=form, error=error)@app.route('/login', methods=['POST', 'GET'])def login():    form = LoginForm()    error = None    if request.method == "POST":        password = form.password.data        user = User.query.filter_by(email=form.email.data).first()        if user:            if check_password_hash(user.password, password):                login_user(user)                return redirect(url_for('get_all_posts'))        error = 'Invalid Credentials'    return render_template("login.html", form=form, error=error)@app.route('/logout')def logout():    logout_user()    return redirect(url_for('get_all_posts'))@app.route("/about")def about():    return render_template("about.html")@app.route("/contact")def contact():    return render_template("contact.html")@app.route("/new-post",methods=['GET','POST'])@admin_onlydef add_new_post():    form = CreatePostForm()    if form.validate_on_submit():        new_post = BlogPost(            title=form.title.data,            subtitle=form.subtitle.data,            body=form.body.data,            img_url=form.img_url.data,            author=current_user.username,            date=date.today().strftime("%B %d, %Y")        )        db.session.add(new_post)        db.session.commit()        return redirect(url_for("get_all_posts"))    return render_template("make-post.html", form=form)@app.route("/edit-post/<int:post_id>")@admin_onlydef edit_post(post_id):    post = BlogPost.query.get(post_id)    edit_form = CreatePostForm(        title=post.title,        subtitle=post.subtitle,        img_url=post.img_url,        author=post.author,        body=post.body    )    if edit_form.validate_on_submit():        post.title = edit_form.title.data        post.subtitle = edit_form.subtitle.data        post.img_url = edit_form.img_url.data        post.author = edit_form.author.data        post.body = edit_form.body.data        db.session.commit()        return redirect(url_for("show_post", post_id=post.id))    return render_template("make-post.html", form=edit_form)@app.route("/delete/<int:post_id>")@admin_onlydef delete_post(post_id):    post_to_delete = BlogPost.query.get(post_id)    db.session.delete(post_to_delete)    db.session.commit()    return redirect(url_for('get_all_posts'))@login_manager.user_loaderdef load_user(user_id):    return User.query.get(user_id)if __name__ == "__main__":    app.run(debug=True)